#pragma once
/*
---------------旋转的三种表达方式---------------
旋转的三种表达方式 绕y轴旋转30度
1、矩阵(复杂)
	cos(30) 0 -sin(30)
	0		1	0
	sin(30) 0 cos(30)
2、欧拉角(万向锁)
	heading	= 30
	pitch	=  0
	bank	=  0
3、四元数
	[0.9679 (0	0.2588	0)]

任务							    	矩阵						欧拉角					四元数
在坐标系间(物体和惯性)旋转点			能				不能(必须旋转到矩阵)			不能(必须旋转到矩阵)
连接或增量旋转					能，但比四元素慢				不能						能，比矩阵快
插值								  基本上不能		能，但可能遇到万向锁或其他问题		Slerp提供了平滑插值
易用程度								难						简单						  难
在内存的存储							9个数					3个数					4个数
对给定方向的表达是否唯一				是				不是，对同一方向有无数多		不是，有俩种方法，互相为负
可能导致非法							矩阵蠕变		 任意三个数都能构成合法的欧拉角	可能会出现误差累积，从而产生非法四元数

---------------旋转的三种表达方式---------------

-----------------矩阵-------------
1、矩阵(复杂)
2d旋转矩阵
x轴 (1,0) -> cos() sin()
y轴 (0,1) -> -sin() cos()
当旋转角度为0时,就是坐标轴

1	0
0	1

cos() sin()
-sin() cos()
3d旋转矩阵
绕x轴旋转
y轴 (0, 1, 0) -> (0, cos(), sin())
z轴 (0, 0, 1) -> (0, -sin(), cos())
旋转矩阵
1	0	 0
0	cos	 sin
0	-sin cos
绕y轴旋转
x轴 (1, 0, 0) -> (cos(), 0, -sin())
z轴 (0, 0, 1) -> (sin(), 0, cos())
旋转矩阵
cos 0 -sin
0	1	0
sin 0 cos
绕z轴旋转
x轴 (1, 0, 0) -> (cos(), sin(), 0)
y轴 (0, 1, 0) -> (-sin(), cos(), 0)
旋转矩阵
cos  sin	0
-sin cos	0
0	 0		1

绕任意轴旋转矩阵很复杂就不写了

--------------矩阵----------------

--------------欧拉角----------------
绕Y轴旋转(左右) 左右看		Heading	(Yaw)
绕X轴旋转(上下) 不倒翁前后	Pitch 
绕Z轴旋转(翻滚) 不倒翁左右	Bank	(Roll)

万向锁
当pitch轴为+90或-90度时，只能绕垂直轴旋转
欧拉角插值过程中可能会碰到万向锁问题

--------------欧拉角----------------

--------------四元数----------------
描述:绕着任意一个方向(xy)旋转θ角度(z)
q = [w v]
q = [w (x y z)]
q = [cos(θ/2) sin(θ/2)n]
  = [cos(θ/2) sin(θ/2)Nx sin(θ/2)Ny sin(θ/2)Nz]

四元数的模
||q|| = sqrt(cos(θ/2)^2 + sin(θ/2)^2 * ||N||^2);
	  = sqrt(cos(θ/2)^2 + sin(θ/2)^2);
	  = sqrt(1)
	  = 1

四元数的共轭和逆

二维中的共轭:
p  = a + bi;
p* = a - bi;
四元数的共轭:
q = [w v]
q* = [w v]*
   = [w -v]
   = [w (-x -y -z)]
四元数的逆
q-1 = q* / ||q||
    = q* / 1
	= q*
四元数的共轭跟四元数的逆相同
[w v]* = [w v]-1
很好理解，绕着这个轴旋转30度，如果绕相反的轴旋转30度就回去了

四元数的叉乘（过程书中147页）
q1q2 = [w1 v1][w1 v2]
	 = [w1 (x1 y1 z1)][w1 (x1 y1 z1)]
	 = [w1*w2-v1*v2		w1*v2 + w2*v1 + v1 x v2]

满足结合律
	q(rs) = (qr)s
不满足交换律
	qr != rq
	||qr|| = ||q|| * ||r||
	(ab)-1 =(b-1)(a-1)

旋转
令空间中一点p [0	(x y z)]
四元数q [cos(θ/2) sin(θ/2)n]
p点根据q旋转:
p' = q*p*(q-1)
p点根据ab俩个四元数旋转
p' = b * (a*p*(a-1)) * (b-1) 
   = (b*a)* p *(b*a-1)	

因为是反方向的用起来别扭，修改为(仅叉乘部分受到影响):

q1q2 = [w1 v1][w1 v2]
	 = [w1 (x1 y1 z1)][w1 (x1 y1 z1)]
	 = [w1*w2-v1*v2		w1*v2 + w2*v1 + v1 * v2]
p' = (q-1)*p*q
p' = (b-1) * ((a-1)*p*a) * b
   = (b*a-1) * p * (b*a)

四元数的"差" (除法)
四元数a 通过角位移d到四元数b
ad = b
d = b / a
d = (a-1) * b

四元数的点乘
q1*q2 = [w1 v1]*[w2 v2]
	  = w1*w2 + x1*x2 + y1*y2 + z1*z2	

四元数的对数
q = [cos(θ/2) sin(θ/2)n]
log(q) = [0 (θ/2)n]

四元数的指数
exp(p) = [cos(θ/2) n*sin(θ/2)]

四元数的标量乘
q = [w v]
k*q = k[w v] = [kw kv]

^^!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!^^
关于四元数的叉乘跟点乘，如果是叉乘，那么旋转从右往左，如果是点乘，
旋转从左往右计算，所以，代码中叉乘使用的是点乘，方便旋转的从左往右
^^!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!^^

--------------四元数----------------

*/