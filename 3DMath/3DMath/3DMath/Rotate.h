#pragma once
/*
---------------旋转的三种表达方式---------------
旋转的三种表达方式 绕y轴旋转30度
1、矩阵(复杂)
	cos(30) 0 -sin(30)
	0		1	0
	sin(30) 0 cos(30)
2、欧拉角(万向锁)
	heading	= 30
	pitch	=  0
	bank	=  0
3、四元数
	[0.9679 (0	0.2588	0)]

任务							    	矩阵						欧拉角					四元数
在坐标系间(物体和惯性)旋转点			能				不能(必须旋转到矩阵)			不能(必须旋转到矩阵)
连接或增量旋转					能，但比四元素慢				不能						能，比矩阵快
插值								  基本上不能		能，但可能遇到万向锁或其他问题		Slerp提供了平滑插值
易用程度								难						简单						  难
在内存的存储							9个数					3个数					4个数
对给定方向的表达是否唯一				是				不是，对同一方向有无数多		不是，有俩种方法，互相为负
可能导致非法							矩阵蠕变		 任意三个数都能构成合法的欧拉角	可能会出现误差累积，从而产生非法四元数

---------------旋转的三种表达方式---------------

-----------------矩阵-------------
1、矩阵(复杂)
2d旋转矩阵
x轴 (1,0) -> cos() sin()
y轴 (0,1) -> -sin() cos()
当旋转角度为0时,就是坐标轴

1	0
0	1

cos() sin()
-sin() cos()
3d旋转矩阵
绕x轴旋转
y轴 (0, 1, 0) -> (0, cos(), sin())
z轴 (0, 0, 1) -> (0, -sin(), cos())
旋转矩阵
1	0	 0
0	cos	 sin
0	-sin cos
绕y轴旋转
x轴 (1, 0, 0) -> (cos(), 0, -sin())
z轴 (0, 0, 1) -> (sin(), 0, cos())
旋转矩阵
cos 0 -sin
0	1	0
sin 0 cos
绕z轴旋转
x轴 (1, 0, 0) -> (cos(), sin(), 0)
y轴 (0, 1, 0) -> (-sin(), cos(), 0)
旋转矩阵
cos  sin	0
-sin cos	0
0	 0		1

绕任意轴旋转矩阵很复杂就不写了

--------------矩阵----------------

--------------欧拉角----------------
绕Y轴旋转(左右) 左右看		Heading	(Yaw)
绕X轴旋转(上下) 不倒翁前后	Pitch 
绕Z轴旋转(翻滚) 不倒翁左右	Bank	(Roll)

万向锁
当pitch轴为+90或-90度时，只能绕垂直轴旋转
欧拉角插值过程中可能会碰到万向锁问题

--------------欧拉角----------------

*/